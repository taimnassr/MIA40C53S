minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05)
#convert into names vectors
gsea_c53s = setNames(gsea_c53s[[1]], rpwnames(gsea_c53s))
#convert into names vectors
gsea_c53s = setNames(gsea_c53s[[1]], r0wnames(gsea_c53s))
#convert into names vectors
gsea_c53s = setNames(gsea_c53s[[1]], rownames(gsea_c53s))
head(gsea_c53s)
gsea_wt = setNames(gsea_wt[[1]], rownames(gsea_wt))
gsea_wt = setNames(gsea_wt[[1]], rownames(gsea_wt))
gsea_mock = setNames(gsea_mock[[1]], rownames(gsea_mock))
names(gsea_c53s) = sub("\\.\\d+$","", names(gsea_c53s))
names(gsea_wt) = sub("\\.\\d+$","", names(gsea_wt))
names(gsea_mock) = sub("\\.\\d+$","", names(gsea_mock))
head(gsea_c53s)
gsea_result_c53s = gseGO(geneList = gsea_c53s,
OrgDb = org.Hs.eg.db,
ont = "BP",keyType = "ENSEMBL",
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05)
head(gsea_result_c53s)
gsea_result_c53s = as.data.frame(gsea_result_c53s)
head(gsea_result_c53s)
gsea_result_wt = gseGO(geneList = gsea_wt,
OrgDb = org.Hs.eg.db,
ont = "BP",keyType = "ENSEMBL",
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05)
gsea_result_wt = as.data.frame(gsea_result_wt)
gsea_wt
gsea_wt = as.data.frame(wt_24_4[,"stat"])
rownames(gsea_wt) = rownames(wt_24_4)
gsea_wt = setNames(gsea_wt[[1]], rownames(gsea_wt))
gsea_wt
names(gsea_wt) = sub("\\.\\d+$","", names(gsea_wt))
gsea_result_wt = gseGO(geneList = gsea_wt,
OrgDb = org.Hs.eg.db,
ont = "BP",keyType = "ENSEMBL",
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05)
gsea_result_wt = as.data.frame(gsea_result_wt)
gsea_result_wt$Description
gsea_result_mock = gseGO(geneList = gsea_mock,
OrgDb = org.Hs.eg.db,
ont = "BP",keyType = "ENSEMBL",
minGSSize = 10,
maxGSSize = 500,
pvalueCutoff = 0.05)
gsea_result_mock = as.data.frame(gsea_result_mock)
source("/mnt/d/Data_Analysis/NGS_KW_MIA40C53S/MIA40C53S/R_scripts/count_data/GSEA_24h_vs_0h_all_conditions.R")
GSEA_KEGG_df_to_dotplot <- function(GSEA_df,
num_entries =20, title){
##this is a function that takes a DATA frame of the
#results of the GSEA or KEGG and then plots the dotplot
#it all takes how many GO terms we need to graph,
#the default is num_entries = 20
##make sure the input is converted to dataframe before
##here you have to make sure that the NES column, p.adj,
# setsize, and Description exists
##title tell us what the title of the graph should be
colnames_to_check = c("Description", "NES", "p.adjust",
"setSize")
if (!all(colnames_to_check %in% colnames(GSEA_df))){
stop("Required Columns are not present in the dataframe")
}
###take the top num_entries entries based on their ABSOLUTE
#NES value
##to make sure there is equal representations
# we will take the top 10 upregulated and top 10 downregulated
GSEA_pos = GSEA_df[GSEA_df$NES > 0,]
GSEA_top = GSEA_pos[order(abs(GSEA_pos$NES),
decreasing = TRUE),]
GSEA_top = GSEA_top[1:(num_entries/2),] ## here the top 10 upregulated terms
GSEA_neg = GSEA_df[GSEA_df$NES < 0,]
GSEA_btm = GSEA_neg[order(abs(GSEA_neg$NES),
decreasing = TRUE),]
GSEA_btm = GSEA_btm[1:(num_entries/2),] ## here the top 10 downregulated terms
GSEA_input = rbind(GSEA_top, GSEA_btm)
##then we order the input
## we order the description based on NES Value
#this is important in the graph for factoring
#remove rows containing NA
GSEA_input = na.omit(GSEA_input)
GSEA_input$Description = factor(GSEA_input$Description,
levels = GSEA_input$Description[order(GSEA_input$NES)])
suppressPackageStartupMessages(library(ggplot2))
##maybe we need to tranform NES to visualize better
dotplot = ggplot(GSEA_input, aes(x = NES,
y = Description,
size = setSize,
color = p.adjust))+
scale_size_continuous(range = c(1,10),
limits = c(min(GSEA_input$setSize),
max(GSEA_input$setSize)),
breaks = seq(min(GSEA_input$setSize),
max(GSEA_input$setSize),
by = 80))+
geom_point() +
labs( x = "Normalized Enrichment Value (NES)",
y = "KEGG Pathways",
title = title,
size = "Number of genes per KEGG Entry",
color = "Adjusted P.value")+ theme_minimal()+
theme(axis.text.y = element_text(size = 10),
plot.title = element_text(size = 20),
axis.title = element_text(size = 14)) +
scale_color_gradient(low = "blue",
high = "red",
limits = c(0,0.05))
return(dotplot)
}
plot_c53s = GSEA_KEGG_df_to_dotplot(gsea_result_c53s, 20,
"GSEA C53S 24h vs 4h")
plot_c53s
GSEA_KEGG_df_to_dotplot <- function(GSEA_df,
num_entries =20, title){
##this is a function that takes a DATA frame of the
#results of the GSEA or KEGG and then plots the dotplot
#it all takes how many GO terms we need to graph,
#the default is num_entries = 20
##make sure the input is converted to dataframe before
##here you have to make sure that the NES column, p.adj,
# setsize, and Description exists
##title tell us what the title of the graph should be
colnames_to_check = c("Description", "NES", "p.adjust",
"setSize")
if (!all(colnames_to_check %in% colnames(GSEA_df))){
stop("Required Columns are not present in the dataframe")
}
###take the top num_entries entries based on their ABSOLUTE
#NES value
##to make sure there is equal representations
# we will take the top 10 upregulated and top 10 downregulated
GSEA_pos = GSEA_df[GSEA_df$NES > 0,]
GSEA_top = GSEA_pos[order(abs(GSEA_pos$NES),
decreasing = TRUE),]
GSEA_top = GSEA_top[1:(num_entries/2),] ## here the top 10 upregulated terms
GSEA_neg = GSEA_df[GSEA_df$NES < 0,]
GSEA_btm = GSEA_neg[order(abs(GSEA_neg$NES),
decreasing = TRUE),]
GSEA_btm = GSEA_btm[1:(num_entries/2),] ## here the top 10 downregulated terms
GSEA_input = rbind(GSEA_top, GSEA_btm)
##then we order the input
## we order the description based on NES Value
#this is important in the graph for factoring
#remove rows containing NA
GSEA_input = na.omit(GSEA_input)
GSEA_input$Description = factor(GSEA_input$Description,
levels = GSEA_input$Description[order(GSEA_input$NES)])
suppressPackageStartupMessages(library(ggplot2))
##maybe we need to tranform NES to visualize better
dotplot = ggplot(GSEA_input, aes(x = NES,
y = Description,
size = setSize,
color = p.adjust))+
scale_size_continuous(range = c(1,10),
limits = c(min(GSEA_input$setSize),
max(GSEA_input$setSize)),
breaks = seq(min(GSEA_input$setSize),
max(GSEA_input$setSize),
by = 80))+
geom_point() +
labs( x = "Normalized Enrichment Value (NES)",
y = "KEGG Pathways",
title = title,
size = "Number of genes per Go Term",
color = "Adjusted P.value")+ theme_minimal()+
theme(axis.text.y = element_text(size = 10),
plot.title = element_text(size = 20),
axis.title = element_text(size = 14)) +
scale_color_gradient(low = "blue",
high = "red",
limits = c(0,0.05))
return(dotplot)
}
plot_c53s = GSEA_KEGG_df_to_dotplot(gsea_result_c53s, 20,
"GSEA C53S 24h vs 4h")
plot_c53s
GSEA_KEGG_df_to_dotplot <- function(GSEA_df,
num_entries =20, title){
##this is a function that takes a DATA frame of the
#results of the GSEA or KEGG and then plots the dotplot
#it all takes how many GO terms we need to graph,
#the default is num_entries = 20
##make sure the input is converted to dataframe before
##here you have to make sure that the NES column, p.adj,
# setsize, and Description exists
##title tell us what the title of the graph should be
colnames_to_check = c("Description", "NES", "p.adjust",
"setSize")
if (!all(colnames_to_check %in% colnames(GSEA_df))){
stop("Required Columns are not present in the dataframe")
}
###take the top num_entries entries based on their ABSOLUTE
#NES value
##to make sure there is equal representations
# we will take the top 10 upregulated and top 10 downregulated
GSEA_pos = GSEA_df[GSEA_df$NES > 0,]
GSEA_top = GSEA_pos[order(abs(GSEA_pos$NES),
decreasing = TRUE),]
GSEA_top = GSEA_top[1:(num_entries/2),] ## here the top 10 upregulated terms
GSEA_neg = GSEA_df[GSEA_df$NES < 0,]
GSEA_btm = GSEA_neg[order(abs(GSEA_neg$NES),
decreasing = TRUE),]
GSEA_btm = GSEA_btm[1:(num_entries/2),] ## here the top 10 downregulated terms
GSEA_input = rbind(GSEA_top, GSEA_btm)
##then we order the input
## we order the description based on NES Value
#this is important in the graph for factoring
#remove rows containing NA
GSEA_input = na.omit(GSEA_input)
GSEA_input$Description = factor(GSEA_input$Description,
levels = GSEA_input$Description[order(GSEA_input$NES)])
suppressPackageStartupMessages(library(ggplot2))
##maybe we need to tranform NES to visualize better
dotplot = ggplot(GSEA_input, aes(x = NES,
y = Description,
size = setSize,
color = p.adjust))+
scale_size_continuous(range = c(1,10),
limits = c(min(GSEA_input$setSize),
max(GSEA_input$setSize)),
breaks = seq(min(GSEA_input$setSize),
max(GSEA_input$setSize),
by = 80))+
geom_point() +
labs( x = "Normalized Enrichment Value (NES)",
y = "GO Term",
title = title,
size = "Number of genes per Go Term",
color = "Adjusted P.value")+ theme_minimal()+
theme(axis.text.y = element_text(size = 10),
plot.title = element_text(size = 20),
axis.title = element_text(size = 14)) +
scale_color_gradient(low = "blue",
high = "red",
limits = c(0,0.05))
return(dotplot)
}
plot_c53s = GSEA_KEGG_df_to_dotplot(gsea_result_c53s, 20,
"GSEA C53S 24h vs 4h")
plot_c53s
pdf("plots/GSEA/GSEA_C53S_24h_vs_4h.pdf", width = 10, heigh=8)
plot_c53s
dev.off()
plot_wt = GSEA_KEGG_df_to_dotplot(gsea_result_wt, 20,
"GSEA WT 24h vs 4h")
"GSEA WT 24h vs 4h")
pdf("plots/GSEA/GSEA_WT_24h_vs_4h.pdf", width = 10, heigh=8)
plot_wt
dev.off()
plot_mock = GSEA_KEGG_df_to_dotplot(gsea_result_mock, 20,
"GSEA Mock 24h vs 4h")
pdf("plots/GSEA/GSEA_MOck_24h_vs_4h.pdf", width = 10, heigh=8)
plot_mock
dev.off()
deg_c53s
deg_c53s = read.csv("count_data/DESeq2_results_C53S_24h_vs_0h.csv")
head(deg_c53s)
####now we will chose which genes that have the following
## avs(log2fc) > 0.5 and p.adj < 0.05
deg_c53s = deg_c53s[abs(deg_c53s$log2FoldChange) > 0.5 &
deg_c53s$padj < 0.05, ]
head(deg_c53s)
deg_c53s = na.omit(deg_c53s)
head(deg_c53s)
nrow(deg_c53s)
deg_c53s = deg_c53s$X
deg_c53s
## now we have our gene names let us do the RPKM graph
rpkm = read.csv("count_data/rpkm.csv")
head(rpkm)
gene_to_ensembl = read.csv("count_data/ensembl_to_gene_conversion.csv")
head(gene_to_ensembl)
rpkm2 = merge(rpkm, gene_to_ensembl,
by.x = "X", by.y = "V1")
head(rpkm2)
rpkm3 = rpkm2[, c("0h","24h") in colnames(rpkm3)]
rpkm3 = rpkm2[, c("0h","24h") %in% colnames(rpkm3)]
rpkm3 = rpkm2[, c("0h","24h") %in% colnames(rpkm2)]
head(rpkm3)
colnames(rpkm2)
c("0h","24h") %in% colnames(rpkm2)
rpkm3 = rpkm2[, grepl("0h|24h", colnames(rpkm2))]
head(rpkm3)
ncol(rpkm3)
rpkm3$gene = rpkm2$V2
head(rpkm3)
ncol(rpkm3)
ncol(rpkm2)
ncol(rpkm)
nrow(rpkm3)
### now let us keep only our genes
rpkm3 = rpkm3[grepl(deg_c53s, rpkm3$gene),]
head(rpkm3)
rpkm3 = rpkm2[, grepl("0h|24h", colnames(rpkm2))]
head(rpkm3)
rpkm3$gene = rpkm2$V2
### now let us keep only our genes
rpkm3 = rpkm3[rpkm3$gene %in% deg_c53s,]
head(rpkm3)
nrow(rpkm3)
library(tidyr)
rpkm4 = pivot_longer(rpkm3,
cols = -gene,
names_to = c("Condition", "Time", "Replicate"),
names_sep ="_",
values_to = "RPKM")
head(rpkm4)
rpkm4 = pivot_longer(rpkm3,
cols = -gene,
names_to = c("Condition", "Time", "Replicate"),
names_sep =".",
values_to = "RPKM")
head(rpkm4)
rpkm4 = pivot_longer(rpkm3,
cols = -gene,
names_to = c("Condition", "Time", "Replicate"),
names_sep ="\\.",
values_to = "RPKM")
head(rpkm4)
## let us go to graphing
head(rpkm3)
rpkm4 = as.data.frame(rpkm4)
head(rpkm4)
rpkm_graph = ggplot(rpkm, aes(x = gene,
y = RPKM,
color = Time,
shape = Condition))+
geom_point()
## let us go to graphing
library(ggplot2)
rpkm_graph = ggplot(rpkm, aes(x = gene,
y = RPKM,
color = Time,
shape = Condition))+
geom_point()
rpkm_graph
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = RPKM,
color = Time,
shape = Condition))+
geom_point()
rpkm_graph
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = RPKM,
color = Time,
shape = Condition))+
geom_point(fill = NA)
rpkm_graph
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = RPKM,
color = Time,
shape = Condition))+
geom_point(shape = 21, fill = NA)
rpkm_graph
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = RPKM,
color = Time,
shape = Condition))+
geom_point( fill = NA) +
scale_shape_manual(values =c("WT" = 21,
"C53S" =22,
"Mock" = 24))
rpkm_graph
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = RPKM,
color = Time,
shape = Condition))+
geom_point( fill = NA) +
scale_shape_manual(values =c("WT" = 21,
"C53S" =22,
"Mock" = 24)) +
geom_jitter()
rpkm_graph
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = RPKM,
color = Time,
shape = Condition))+
geom_jitter( fill = NA) +
scale_shape_manual(values =c("WT" = 21,
"C53S" =22,
"Mock" = 24))
rpkm_graph
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = RPKM,
color = Time,
shape = Condition))+
geom_jitter( fill = NA, size = 4) +
scale_shape_manual(values =c("WT" = 21,
"C53S" =22,
"Mock" = 24))
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = RPKM,
color = Time,
shape = Condition))+
geom_jitter( fill = NA, size = 4) +
scale_shape_manual(values =c("WT" = 21,
"C53S" =22,
"Mock" = 24))
rpkm_graph
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = RPKM,
color = Time,
shape = Condition))+
geom_jitter( fill = NA, size = 3) +
scale_shape_manual(values =c("WT" = 21,
"C53S" =22,
"Mock" = 24))
rpkm_graph
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = RPKM,
color = Condition,
shape = Time))+
geom_jitter( fill = NA, size = 3) +
scale_shape_manual(values =c("0h" = 21,
"24h" = 24))
rpkm_graph
Time
Time
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = RPKM,
color = Time,
shape = Condition))+
geom_jitter( fill = NA, size = 3) +
scale_shape_manual(values =c("WT" = 21,
"C53S" =22,
"Mock" = 24))
rpkm_graph
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = RPKM,
color = Time,
shape = Condition))+
geom_jitter( fill = NA, size = 3) +
scale_shape_manual(values =c("WT" = 21,
"C53S" =22,
"Mock" = 24)) +
labs(x = "Gene Name", y = "RPKM Value")
rpkm_graph
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = log10(RPKM),
color = Time,
shape = Condition))+
geom_jitter( fill = NA, size = 3) +
scale_shape_manual(values =c("WT" = 21,
"C53S" =22,
"Mock" = 24)) +
labs(x = "Gene Name", y = "RPKM Value")
rpkm_graph
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = log10(RPKM),
color = Time,
shape = Condition))+
geom_jitter( fill = NA, size = 3) +
scale_shape_manual(values =c("WT" = 21,
"C53S" =22,
"Mock" = 24)) +
labs(x = "Gene Name", y = "Log 10 RPKM Value")
rpkm_graph
pdf("plots/RPKM_top_20_DEG_C53S_24_vs_0.pdf", width = 10,
height = 8)
rpkm_graph
dev.off()
deg_c53s = read.csv("count_data/DESeq2_results_C53S_24h_vs_0h.csv")
####now we will chose which genes that have the following
## avs(log2fc) > 0.5 and p.adj < 0.05
deg_c53s = deg_c53s[abs(deg_c53s$log2FoldChange) > 0.5 &
deg_c53s$padj < 0.05, ]
deg_c53s = na.omit(deg_c53s)
deg_c53s = deg_c53s$X
## now we have our gene names let us do the RPKM graph
rpkm = read.csv("count_data/rpkm.csv")
head(rpkm)
ncol(rpkm)
gene_to_ensembl = read.csv("count_data/ensembl_to_gene_conversion.csv")
head(gene_to_ensembl)
rpkm2 = merge(rpkm, gene_to_ensembl,
by.x = "X", by.y = "V1")
ncol(rpkm2)
rpkm3 = rpkm2[, grepl("0h|24h", colnames(rpkm2))]
rpkm3$gene = rpkm2$V2
### now let us keep only our genes
rpkm3 = rpkm3[rpkm3$gene %in% deg_c53s,]
library(tidyr)
rpkm4 = pivot_longer(rpkm3,
cols = -gene,
names_to = c("Condition", "Time", "Replicate"),
names_sep ="\\.",
values_to = "RPKM")
head(rpkm4)
rpkm4 = as.data.frame(rpkm4)
## let us go to graphing
library(ggplot2)
rpkm_graph = ggplot(rpkm4, aes(x = gene,
y = log10(RPKM),
color = Time,
shape = Condition))+
geom_jitter( fill = NA, size = 3) +
scale_shape_manual(values =c("WT" = 21,
"C53S" =22,
"Mock" = 24)) +
labs(x = "Gene Name", y = "Log 10 RPKM Value")
rpkm_graph
pdf("plots/RPKM_top_20_DEG_C53S_24_vs_0.pdf", width = 15,
height = 8)
rpkm_graph
dev.off()
