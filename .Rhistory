labs(title = title,
x = "Log2FC",
y = "-log10(P. adjusted)")+
geom_text(data = sig_df,
mapping = aes(x = log2FoldChange,
y = -log10(padj),
label = gene),
size = 2)+
geom_vline(xintercept = c(-log2fc_threshold,
log2fc_threshold), color = "blue")+
geom_hline(yintercept = -log10(padj_threshold),
color = "blue") +
scale_x_continuous(breaks = seq(-5,5, by  = 1),
labels = seq(-5,5, by = 1),
limits = c(-5,5))
plot = ggplot(df,
aes(x = log2FoldChange,
y = -log10(padj))) +
geom_point(aes(colour = significance)) +
scale_color_manual(values = c("Significant" = "red",
"Non-Significant" = "grey"))+
labs(title = title,
x = "Log2FC",
y = "-log10(P. adjusted)")+
geom_text(data = sig_df,
mapping = aes(x = log2FoldChange,
y = -log10(padj),
label = gene),
size = 2)+
geom_vline(xintercept = c(-log2fc_threshold,
log2fc_threshold), color = "blue")+
geom_hline(yintercept = -log10(padj_threshold),
color = "blue") +
scale_x_continuous(breaks = seq(-5,5, by  = 1),
labels = seq(-5,5, by = 1),
limits = c(-5,5))
pdf("plots/Volcano_plots/Volcano_plot_C53S_vs_WT_24h_vs_0h.pdf",
height = 8,width = 10)
plot
dev.off()
plot = ggplot(df,
aes(x = log2FoldChange,
y = -log10(padj))) +
geom_point(aes(colour = significance)) +
scale_color_manual(values = c("Significant" = "red",
"Non-Significant" = "grey"))+
labs(title = title,
x = "Log2FC",
y = "-log10(P. adjusted)")+
geom_text(data = sig_df,
mapping = aes(x = log2FoldChange,
y = -log10(padj),
label = gene),
size = 4)+
geom_vline(xintercept = c(-log2fc_threshold,
log2fc_threshold), color = "blue")+
geom_hline(yintercept = -log10(padj_threshold),
color = "blue") +
scale_x_continuous(breaks = seq(-5,5, by  = 1),
labels = seq(-5,5, by = 1),
limits = c(-5,5))
pdf("plots/Volcano_plots/Volcano_plot_C53S_vs_WT_24h_vs_0h.pdf",
height = 8,width = 10)
plot
dev.off()
2 ^ 0.5
getwd()
c53s_wt_24_0 = read.csv("count_data/DESeq2_results_C53S_24h_vs_0h_vs_WT.csv")
head(c53s_wt_24_0)
volcano_plots = function(df, title,
log2fc_threshold = 1,
padj_threshold = 0.05){
#df should be containing DESEQ log2fc results as dataframe
#there should be a column with the log2foldchange
#called log2FoldChange  and a column called padj
## also there should be a column called significance
# to check whether a gene is considered DEG or not
#also the rownames should contain the gene names
col_names = c("log2FoldChange", "padj")
if(!all( col_names %in%
colnames(df))){
stop("Missing columns: log2FoldChange or padj")
}
#conditon name is like mock vs wt
#sig_threshold is what value should the abs log2fc  be higher
#than. usually it is 1 unless you used another sig_threshold
df$significance = "Non-Significant"
df$significance[abs(df$log2FoldChange) > log2fc_threshold &
df$padj < padj_threshold] = "Significant"
df$padj[df$padj == 0] = 1e-100
sig_df = df[df$significance == "Significant",]#this is the
#significant df
sig_df$gene = rownames(sig_df)
library(ggplot2)
library(ggrepel)
title = paste ("DESeq2 Results", title )
plot = ggplot(df,
aes(x = log2FoldChange,
y = -log10(padj))) +
geom_point(aes(colour = significance)) +
scale_color_manual(values = c("Significant" = "red",
"Non-Significant" = "grey"))+
labs(title = title,
x = "Log2FC",
y = "-log10(P. adjusted)")+
geom_text_repel(data = sig_df,
mapping = aes(x = log2FoldChange,
y = -log10(padj),
label = gene),
size = 3,
max.overlaps = 30)+
geom_vline(xintercept = c(-log2fc_threshold,
log2fc_threshold), color = "blue")+
geom_hline(yintercept = -log10(padj_threshold),
,color = "blue") +
ylim(c(0,200)) +
scale_x_continuous(breaks = seq(-5,5, by  = 1),
labels = seq(-5,5, by = 1),
limits = c(-5,5))
return(plot)
}
##now we wanna try and plot
rownames(c53s_wt_24_0) = c53s_wt_24_0$X
head(c53s_wt_24_0)
volcano1 = volcano_plots(c53s_wt_24_0,
log2fc_threshold = 0.5,
padj_threshold = 0.2)
volcano1 = volcano_plots(c53s_wt_24_0,
log2fc_threshold = 0.5,
padj_threshold = 0.2,
title = "C53S 24h vs 0h vs WT")
volcano1
volcano_plots2 = function(df, title,
log2fc_threshold = 1,
padj_threshold = 0.05){
#THis function is the same as volcano_plots
#but it uses geom_text instead of geom_text_repel
#reason for this is that data to be higlighted seem
#two small
#df should be containing DESEQ log2fc results as dataframe
#there should be a column with the log2foldchange
#called log2FoldChange  and a column called padj
## also there should be a column called significance
# to check whether a gene is considered DEG or not
#also the rownames should contain the gene names
col_names = c("log2FoldChange", "padj")
if(!all( col_names %in%
colnames(df))){
stop("Missing columns: log2FoldChange or padj")
}
#conditon name is like mock vs wt
#sig_threshold is what value should the abs log2fc  be higher
#than. usually it is 1 unless you used another sig_threshold
df$significance = "Non-Significant"
df$significance[abs(df$log2FoldChange) > log2fc_threshold &
df$padj < padj_threshold] = "Significant"
df$padj[df$padj == 0] = 1e-100
sig_df = df[df$significance == "Significant",]#this is the
#significant df
sig_df$gene = rownames(sig_df)
library(ggplot2)
library(ggrepel)
title = paste ("DESeq2 Results", title )
plot = ggplot(df,
aes(x = log2FoldChange,
y = -log10(padj))) +
geom_point(aes(colour = significance)) +
scale_color_manual(values = c("Significant" = "red",
"Non-Significant" = "grey"))+
labs(title = title,
x = "Log2FC",
y = "-log10(P. adjusted)")+
geom_text(data = sig_df,
mapping = aes(x = log2FoldChange,
y = -log10(padj),
label = gene),
size = 3)+
geom_vline(xintercept = c(-log2fc_threshold,
log2fc_threshold), color = "blue")+
geom_hline(yintercept = -log10(padj_threshold),
,color = "blue") +
ylim(c(0,200)) +
scale_x_continuous(breaks = seq(-5,5, by  = 1),
labels = seq(-5,5, by = 1),
limits = c(-5,5))
return(plot)
}
volcano1 = volcano_plots2(c53s_wt_24_0,
log2fc_threshold = 0.5,
padj_threshold = 0.2,
title = "C53S 24h vs 0h vs WT")
volcano1
volcano1 = volcano1 + ylim(0,5)
volcano1
pdf("plots/Volcano_plots/Volcano_plot_C53S_vs_WT_24h_vs_0h_p_adj_0.2.pdf",
width = 10, height = 8)
volcano1
dev.off()
volcano2 = volcano_plots(df = c53s_wt_24_0,
log2fc_threshold = 0,
padj_threshold = 0.05,
title = "C53S 24h vs 0h vs WT")
volcano2
volcano2 = volcano_plots2(df = c53s_wt_24_0,
log2fc_threshold = 0,
padj_threshold = 0.05,
title = "C53S 24h vs 0h vs WT")
volcano2
volcano2 = volcano2 + ylim(0,4)
volcano2
volcano2 = volcano2 + ylim(0,5)
volcano2
pdf("plots/Volcano_plots/Volcano_plot_C53S_vs_WT_24h_vs_0h_no_log2fc_threshold.pdf",
width = 10, height = 8)
volcano2
dev.off()
count_data = read.csv("count_data/valid_count_data.csv",
header = TRUE)
head(count_data)
count_data = read.csv("count_data/valid_count_data.csv")
##now I only wanna keep the data of C53S or WT
names = names(count_data)
names_keep = names[grepl("C53S|WT",names)]
count_wt_c53s = count_data[,c("Gene_name",
names_keep)]##keep the relevant
count_matrix = as.matrix(count_wt_c53s[,
2:ncol(count_wt_c53s)])
rownames(count_matrix) = count_wt_c53s$Gene_name##
#we did this as done before
count_matrix
##now let us create to col_data
library(stringr)
col_names = colnames(count_matrix)
condition = str_replace_all(col_names,
"\\..*$", "")
time = str_extract(col_names,
"\\d+h")
coldata = data.frame(condition = factor(condition),
time = factor(time),
row.names = col_names)
coldata$condition = factor(coldata$condition,
levels = c("WT", "C53S"))
coldata
all(names(count_matrix) == rownames(coldata))
head(coldata)
coldata$interaction = paste(coldata$condition,
coldata$time,
sep = "_")
head(coldata)
coldata$interaction = factor(coldata$interaction)
design_matrix = model.matrix( ~ 0 + interaction,
data = coldata)
design
design_matrix
head(design_matrix)
colnames(design_matrix)
design_matrx[,1]
design_matrix[,1]
##### so now we apply voom and limma
library(limma)
BiocManager::install("limma")
##### so now we apply voom and limma
library(limma)
BiocManager::install("edgeR")
library(edgeR)
dge = DGEList(counts = count_matrix)
dge = calcNormFactors(dge)
v = voom(dge,design)
v = voom(dge,design_matrix)
fit = lmFit(v, design_matrix)
fit
fit$coefficients
fit$cov.coefficients
###now we want to contrast
## we want to find the difference between
#C53S between 24h and 0h and WT between 24h and 0h
colnames(design_matrix)
contrast_c53s_wt_24_0 = makeContrasts(
Interaction = (interactionC53S_24h - interactionC53S0h) -
(interactionWT_24h - interactionWT_0h),
levels = design_matrix
)
contrast_c53s_wt_24_0 = makeContrasts(
Interaction = (interactionC53S_24h - interactionC53S_0h) -
(interactionWT_24h - interactionWT_0h),
levels = design_matrix
)
fit2 = contrasts.fit(fit,
contrast_c53s_wt_24_0)
fit2
fit2 = eBayes(fit2)
fit2
results = topTable(fit2,coef = "Interaction",
number = Inf, adjust = "BH")
head(results)
results[abs(results$logFC) > 0.5 &
results$adj.P.Val <0.05,]
fit2$contrasts
colnames(results)
colnames(results)[2] = "log2FoldChange"
colnames(results)
colnames(results)[6] = "padj"
colnames(results)
write.csv(results,
"count_data/Limma_C53S_vs_WT_24h_vs_0h.csv",
row.names = TRUE)
head(results)
rownames(results = results$ID)
rownames(results) = results$ID
head(results)
results$ID = make.unique(results$ID)
rownames(results) = results$ID
write.csv(results,
"count_data/Limma_C53S_vs_WT_24h_vs_0h.csv",
row.names = TRUE)
##now we plot the volcano plot
volcano_limma = volcano_plots(results,
title =  "Limma results C53S vs WT 24h vs 0h",
log2fc_threshold = 0.5,
padj_threshold = 0.05)
volcano_limma
##now we plot the volcano plot
volcano_limma = volcano_plots2(results,
title =  "Limma results C53S vs WT 24h vs 0h",
log2fc_threshold = 0.5,
padj_threshold = 0.05)
volcano_limma
volcano_limma = volcano_limma + ylim(0,5)
volcano_limma
##here you have the functions used in the analysis
## to create volcano plots from DESEQ data results
volcano_plots = function(df, title,
log2fc_threshold = 1,
padj_threshold = 0.05){
#df should be containing DESEQ log2fc results as dataframe
#there should be a column with the log2foldchange
#called log2FoldChange  and a column called padj
## also there should be a column called significance
# to check whether a gene is considered DEG or not
#also the rownames should contain the gene names
col_names = c("log2FoldChange", "padj")
if(!all( col_names %in%
colnames(df))){
stop("Missing columns: log2FoldChange or padj")
}
#conditon name is like mock vs wt
#sig_threshold is what value should the abs log2fc  be higher
#than. usually it is 1 unless you used another sig_threshold
df$significance = "Non-Significant"
df$significance[abs(df$log2FoldChange) > log2fc_threshold &
df$padj < padj_threshold] = "Significant"
df$padj[df$padj == 0] = 1e-100
sig_df = df[df$significance == "Significant",]#this is the
#significant df
sig_df$gene = rownames(sig_df)
library(ggplot2)
library(ggrepel)
plot = ggplot(df,
aes(x = log2FoldChange,
y = -log10(padj))) +
geom_point(aes(colour = significance)) +
scale_color_manual(values = c("Significant" = "red",
"Non-Significant" = "grey"))+
labs(title = title,
x = "Log2FC",
y = "-log10(P. adjusted)")+
geom_text_repel(data = sig_df,
mapping = aes(x = log2FoldChange,
y = -log10(padj),
label = gene),
size = 3,
max.overlaps = 30)+
geom_vline(xintercept = c(-log2fc_threshold,
log2fc_threshold), color = "blue")+
geom_hline(yintercept = -log10(padj_threshold),
,color = "blue") +
ylim(c(0,200)) +
scale_x_continuous(breaks = seq(-5,5, by  = 1),
labels = seq(-5,5, by = 1),
limits = c(-5,5))
return(plot)
}
volcano_plots2 = function(df, title,
log2fc_threshold = 1,
padj_threshold = 0.05){
#THis function is the same as volcano_plots
#but it uses geom_text instead of geom_text_repel
#reason for this is that data to be higlighted seem
#two small
#df should be containing DESEQ log2fc results as dataframe
#there should be a column with the log2foldchange
#called log2FoldChange  and a column called padj
## also there should be a column called significance
# to check whether a gene is considered DEG or not
#also the rownames should contain the gene names
col_names = c("log2FoldChange", "padj")
if(!all( col_names %in%
colnames(df))){
stop("Missing columns: log2FoldChange or padj")
}
#conditon name is like mock vs wt
#sig_threshold is what value should the abs log2fc  be higher
#than. usually it is 1 unless you used another sig_threshold
df$significance = "Non-Significant"
df$significance[abs(df$log2FoldChange) > log2fc_threshold &
df$padj < padj_threshold] = "Significant"
df$padj[df$padj == 0] = 1e-100
sig_df = df[df$significance == "Significant",]#this is the
#significant df
sig_df$gene = rownames(sig_df)
library(ggplot2)
library(ggrepel)
plot = ggplot(df,
aes(x = log2FoldChange,
y = -log10(padj))) +
geom_point(aes(colour = significance)) +
scale_color_manual(values = c("Significant" = "red",
"Non-Significant" = "grey"))+
labs(title = title,
x = "Log2FC",
y = "-log10(P. adjusted)")+
geom_text(data = sig_df,
mapping = aes(x = log2FoldChange,
y = -log10(padj),
label = gene),
size = 3)+
geom_vline(xintercept = c(-log2fc_threshold,
log2fc_threshold), color = "blue")+
geom_hline(yintercept = -log10(padj_threshold),
,color = "blue") +
ylim(c(0,200)) +
scale_x_continuous(breaks = seq(-5,5, by  = 1),
labels = seq(-5,5, by = 1),
limits = c(-5,5))
return(plot)
}
##now we plot the volcano plot
volcano_limma = volcano_plots2(results,
title =  "Limma results C53S vs WT 24h vs 0h",
log2fc_threshold = 0.5,
padj_threshold = 0.05)
volcano_limma = volcano_limma + ylim(0,5)
volcano_limma
volcano_limma = volcano_limma + ylim(0,3)
volcano_limma
pdf("plots/Volcano_plots/Volcano_Plot_LIMMA_C53S_vs_WT_24h_vs_0h.pdf",
width = 10, height = 8)
volcano_limma
dev.off()
setwd("/mnt/d/Data_Analysis/NGS_KW_MIA40C53S/count_data")
count_data = read.csv("valid_count_data.csv",
header = TRUE)
count_data = read.csv("./count_data/valid_count_data.csv",
header = TRUE)
count_matrix = as.matrix(count_data[,
c(4:ncol(count_data))])
row.names(count_matrix) = count_data$Gene_name
col_names = colnames(count_matrix)
col_names
###first extract the conditions
condition = sub("\\..*", "", col_names)
time_point = sub("^[^.]*\\.(\\d{1,2}).*", "\\1", col_names)
time_point = as.numeric(time_point)
repitition = sub(".*\\.(\\d+)$", "\\1", col_names)
repitition = as.numeric(repitition)
col_data = data.frame(
condition = condition,
time_point = time_point,
repitition = repitition,
row.names = col_names
)
col_data$condition = factor(col_data$condition,
levels = c("C53S", "WT", "Mock"))
col_data$condition
col_data$time_point = factor(col_data$time_point,
levels = c(0,4,12,24))
###check now if count matrix aligns with col_data
all(colnames(count_matrix) == rownames(col_data))#should be TRUE
row_names = rownames(count_matrix)#check if they are unique
row_names
any(duplicated(row_names))##if TRUE then change them
row_names2 = make.unique(row_names)
rownames(count_matrix) = row_names2# now they are unique
# now we build or DESEQ models
library(DESeq2)
dds <- DESeqDataSetFromMatrix(
countData = count_matrix,
colData = col_data,
design = ~ condition +
time_point +
condition:time_point) ## here the reference
col_data
#was C53S because we were interesed in that comparison
dds <- DESeq(dds) # now we have our results
resultsNames(dds)# the reference is C53S here
#### now extract our comparison
DESeq_C53S_24_0 = results(dds, name = "time_point_24_vs_0")
DESeq_C53S_24_0 = as.data.frame(DESeq_C53S_24_0)
resultsNames(dds)
### let us find now the DEG
DEG_DESeq_24_0 = DESeq_C53S_24_0[abs(DESeq_C53S_24_0$log2FoldChange) >= 0.5 &
DESeq_C53S_24_0$padj < 0.05,]
DEG_DESeq_24_0
DEG_DESeq_24_0 = na.omit(DEG_DESeq_24_0)
DEG_DESeq_24_0
DESeq_C53S_24_0 = results(dds, name = "conditionMock.time_point24")
DESeq_C53S_24_0 = as.data.frame(DESeq_C53S_24_0)
### let us find now the DEG
DEG_DESeq_24_0 = DESeq_C53S_24_0[abs(DESeq_C53S_24_0$log2FoldChange) >= 0.5 &
DESeq_C53S_24_0$padj < 0.05,]
DEG_DESeq_24_0 = na.omit(DEG_DESeq_24_0)
DEG_DESeq_24_0
